'''
    Time Complexity : O(N)
    Space Complexity : O(1)
    
    Where 'N' is the length of the given permutation.
'''

def nextPermutation(permutation, n):

    # Start iterating from the end of the given permutation.
    for i in range(n - 2, -1, -1):

        if permutation[i] < permutation[i + 1]:

            # Decreasing element found.
            # To store the index of just greater element.
            ind = n - 1

            for j in range(i + 1, n):

                if permutation[j] < permutation[i]:
                    # Element found.
                    ind = j - 1
                    break

            # Swap the ith and element at index 'id'.
            permutation[i], permutation[ind] = permutation[ind], permutation[i]

            # Reverse rest of the elements.
            for j in range(((n - i) // 2)):

                permutation[i + 1 + j], permutation[n - 1 - j] = permutation[n - 1 - j], permutation[i + 1 + j]

            return permutation

    # Next greater permuation doesn't exists. So, return the smallest one.
    permutation = [i for i in range(1, n + 1)]

    return permutation
